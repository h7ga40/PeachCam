# This file was automagically generated by mbed.org. For more information, 
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

###############################################################################
# Boiler-plate

# cross-platform directory manipulation
ifeq ($(shell echo $$OS),$$OS)
    MAKEDIR = if not exist "$(1)" mkdir "$(1)"
    RM = rmdir /S /Q "$(1)"
else
    MAKEDIR = '$(SHELL)' -c "mkdir -p \"$(1)\""
    RM = '$(SHELL)' -c "rm -rf \"$(1)\""
endif

OBJDIR := Debug
# Move to the build directory
ifeq (,$(filter $(OBJDIR),$(notdir $(CURDIR))))
.SUFFIXES:
mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
MAKETARGET = '$(MAKE)' --no-print-directory -C $(OBJDIR) -f '$(mkfile_path)' \
		'SRCDIR=$(CURDIR)' $(MAKECMDGOALS)
.PHONY: $(OBJDIR) clean
all:
	+@$(call MAKEDIR,$(OBJDIR))
	+@$(MAKETARGET)
$(OBJDIR): all
Makefile : ;
% :: $(OBJDIR) ; :
clean :
	$(call RM,$(OBJDIR))

else

# trick rules into thinking we are in the root, when we are in the bulid dir
VPATH = ../../wolfssl-3.15.7

# Boiler-plate
###############################################################################
# Project settings

PROJECT := wolfssl


# Project settings
###############################################################################
# Objects and Paths

OBJECTS += src/crl.o
OBJECTS += src/internal.o
OBJECTS += src/keys.o
OBJECTS += src/ocsp.o
OBJECTS += src/sniffer.o
OBJECTS += src/ssl.o
OBJECTS += src/tls.o
OBJECTS += src/tls13.o
OBJECTS += src/wolfio.o
OBJECTS += wolfcrypt/src/aes.o
OBJECTS += wolfcrypt/src/arc4.o
OBJECTS += wolfcrypt/src/asn.o
OBJECTS += wolfcrypt/src/blake2b.o
OBJECTS += wolfcrypt/src/camellia.o
OBJECTS += wolfcrypt/src/coding.o
OBJECTS += wolfcrypt/src/des3.o
OBJECTS += wolfcrypt/src/dh.o
OBJECTS += wolfcrypt/src/dsa.o
OBJECTS += wolfcrypt/src/ecc.o
OBJECTS += wolfcrypt/src/error.o
OBJECTS += wolfcrypt/src/hash.o
OBJECTS += wolfcrypt/src/hc128.o
OBJECTS += wolfcrypt/src/hmac.o
OBJECTS += wolfcrypt/src/integer.o
OBJECTS += wolfcrypt/src/logging.o
OBJECTS += wolfcrypt/src/md4.o
OBJECTS += wolfcrypt/src/md5.o
OBJECTS += wolfcrypt/src/memory.o
OBJECTS += wolfcrypt/src/misc.o
OBJECTS += wolfcrypt/src/pwdbased.o
OBJECTS += wolfcrypt/src/rabbit.o
OBJECTS += wolfcrypt/src/random.o
OBJECTS += wolfcrypt/src/ripemd.o
OBJECTS += wolfcrypt/src/rsa.o
OBJECTS += wolfcrypt/src/sha.o
OBJECTS += wolfcrypt/src/sha256.o
OBJECTS += wolfcrypt/src/sha512.o
OBJECTS += wolfcrypt/src/wc_encrypt.o
OBJECTS += wolfcrypt/src/wc_port.o
OBJECTS += wolfcrypt/src/wolfmath.o

INCLUDE_PATHS += -I../../musl-1.1.18/include
INCLUDE_PATHS += -I../../zlib-1.2.11/src
INCLUDE_PATHS += -I../../wolfssl-3.15.7

# Objects and Paths
###############################################################################
# Tools and Flags

AS      = arm-none-eabi-gcc
CC      = arm-none-eabi-gcc
CPP     = arm-none-eabi-g++
AR      = arm-none-eabi-ar
RANLIB  = arm-none-eabi-ranlib


C_FLAGS += -std=gnu11
C_FLAGS += -mcpu=cortex-a9
C_FLAGS += -march=armv7-a
C_FLAGS += -marm
C_FLAGS += -mthumb-interwork
C_FLAGS += -mlittle-endian
C_FLAGS += -mfloat-abi=hard
C_FLAGS += -mfpu=vfpv3-d16
C_FLAGS += -Og
C_FLAGS += -fmessage-length=0
C_FLAGS += -fsigned-char
C_FLAGS += -ffunction-sections
C_FLAGS += -fdata-sections
C_FLAGS += -Wall
C_FLAGS += -Wextra
C_FLAGS += -Wno-unused-parameter
C_FLAGS += -Wno-missing-field-initializers
C_FLAGS += -Wnull-dereference
C_FLAGS += -g3
C_FLAGS += -Wstack-usage=256
C_FLAGS += -nostdinc

C_FLAGS += --include ../../mbed-os/mbed_config.h
C_FLAGS += -DHAVE_CONFIG_H
C_FLAGS += -DWOLFSSL_USER_SETTINGS

CXX_FLAGS += -std=gnu++11
CXX_FLAGS += -mcpu=cortex-a9
CXX_FLAGS += -march=armv7-a
CXX_FLAGS += -marm
CXX_FLAGS += -mthumb-interwork
CXX_FLAGS += -mlittle-endian
CXX_FLAGS += -mfloat-abi=hard
CXX_FLAGS += -mfpu=vfpv3-d16
CXX_FLAGS += -Og
CXX_FLAGS += -fmessage-length=0
CXX_FLAGS += -fsigned-char
CXX_FLAGS += -ffunction-sections
CXX_FLAGS += -fdata-sections
CXX_FLAGS += -Wall
CXX_FLAGS += -Wextra
CXX_FLAGS += -Wno-unused-parameter
CXX_FLAGS += -Wno-missing-field-initializers
CXX_FLAGS += -Wnull-dereference
CXX_FLAGS += -g3
CXX_FLAGS += -Wstack-usage=256
CXX_FLAGS += -nostdinc

CXX_FLAGS += --include ../../mbed-os/mbed_config.h


ASM_FLAGS += -x
ASM_FLAGS += assembler-with-cpp
ASM_FLAGS += -mcpu=cortex-a9
ASM_FLAGS += -march=armv7-a
ASM_FLAGS += -marm
ASM_FLAGS += -mthumb-interwork
ASM_FLAGS += -mlittle-endian
ASM_FLAGS += -mfloat-abi=hard
ASM_FLAGS += -mfpu=vfpv3-d16
ASM_FLAGS += -Og
ASM_FLAGS += -fmessage-length=0
ASM_FLAGS += -fsigned-char
ASM_FLAGS += -ffunction-sections
ASM_FLAGS += -fdata-sections
ASM_FLAGS += -Wall
ASM_FLAGS += -Wextra
ASM_FLAGS += -Wno-unused-parameter
ASM_FLAGS += -Wno-missing-field-initializers
ASM_FLAGS += -Wnull-dereference
ASM_FLAGS += -g3
ASM_FLAGS += -Wstack-usage=256
ASM_FLAGS += -nostdinc


# Tools and Flags
###############################################################################
# Rules

.PHONY: all lst size


all: lib$(PROJECT).a


.s.o:
	+@$(call MAKEDIR,$(dir $@))
	+@echo "Assemble: $(notdir $<)"
	@$(AS) -c $(ASM_FLAGS) -o $@ $<

.S.o:
	+@$(call MAKEDIR,$(dir $@))
	+@echo "Assemble: $(notdir $<)"
	@$(AS) -c $(ASM_FLAGS) -o $@ $<

.c.o:
	+@$(call MAKEDIR,$(dir $@))
	+@echo "Compile: $(notdir $<)"
	@$(CC) $(C_FLAGS) $(INCLUDE_PATHS) -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@)" -c -o "$@" "$<"

.cpp.o:
	+@$(call MAKEDIR,$(dir $@))
	+@echo "Compile: $(notdir $<)"
	@$(CPP) $(CXX_FLAGS) $(INCLUDE_PATHS) -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@)" -c -o "$@" "$<"

lib$(PROJECT).a: $(OBJECTS)
	rm -f lib$(PROJECT).a
	$(AR) -rcs lib$(PROJECT).a $(OBJECTS)
	$(RANLIB) lib$(PROJECT).a

# Rules
###############################################################################
# Dependencies

DEPS = $(OBJECTS:.o=.d) $(SYS_OBJECTS:.o=.d)
-include $(DEPS)
endif

# Dependencies
###############################################################################
